I want you to help me spec-out an AI book generation script, with these specifications.



It should take an book title, author name, and book type (with the only option being 'non-fiction' for now)



It should then make an API call to gemini flash 2.0, feed it the book title, and ask it to generate a JSON with 15 chapters for that book, along with a brief summary of each one.



The prompt should be very specific, and ask gemini to deliver the JSON format in a very clear and specific way, because we want consistency. We are going to make many books, and each time the JSON response should be consistent in structure.



Then, after recieveing the JSON with chapters titles and their summaries, our system should iterate through the chapters and make another API call per chapter to gemini 2.0 flash, and ask it to generate the actual content for the current chapter. Each chapter should be about 1400 words long.



In order to ensure continuity and coherence, the system should feed gemini the JSON of the outline of the book (chapter titles and summaries), and tell it which chapter its currently tasked in writing.



The system should ask gemini, on each of the api calls for the chapters, to deliver the content in markdown in a very specific way, again, because we want to ensure consistency. The prompt should be absolutely clear in the structure we want delivered in the response. It should be clear that we want it to go straight into writing the content of the book, without meta commentary or things like "Sure, here is the content for chapter 5: " etc, that LLM's tend to do.



We want to ask for the content delivered in a way that is easy for us to convert to PDF.



Now, regarding the PDF, these are the specifications:



- It must be 5x8 inches

- It must have a Title page with just the book title and author name, centered in the page.

- After the title page, it must have a TOC page 

- Each chapter title in the TOC should be clickable and send the user to the corresponding chapter

- It must have proper margins for a book of that size:

    Insite (gutter margins) = 0.375" in

    Outside margins = at least 0.25 in

    Top/Bottom = 0.5 in

- It must use garamond font

- Pages must be numbered



After the PDF, we should also convert the content to EPUB, in a way that also has the clickable chapter titles in the TOC.



After converting and recieving the PDF and EPUB files successfully, we should make another API call to gemini 2.0 flash, and ask it to return the metadata for the book in JSON format (remember, the prompt should be very specific and provide the structure of how we want to recieve the JSON, to ensure consistency), which should contain the following:

- Sales page description of the book (For Amazon KDP)

- Reading age range

- 3 BISAC categories

- 7 keywords

- Back cover description



Our system should then take that information to generate a beautiful and professional metadata document with the following information:

- Book title (Given by the user at the beginning of the whole process)

- Author name (given by the user at the beginning of the whole process)

- Description (Generated by gemini, extracted from JSON)

- Reading age  (Generated by gemini, extracted from JSON)

- BISAC categories (Generated by gemini, extracted from JSON)

- 7 Keywords (Generated by gemini, extracted from JSON)

- Trim size (Hardcoded to 5x8in)

- Bleed settings (Hardcoded to 'No Bleed')

- Back Cover description (Generated by gemini, extracted from JSON)



At the end of the whole process, the user should recieve the PDF, EPUB, and metadata file



You can use any programming language you feel would be best for this project



You should make a simple HTML interface where the user can input the initial information (book title, author name) so that the process can begin 