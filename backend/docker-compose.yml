# Docker Compose configuration for Flask Book Generator API

version: '3.8'

services:
  # Flask API service
  flask-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: flask-book-generator-api
    restart: unless-stopped
    ports:
      - "${FLASK_PORT:-5000}:5000"
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-false}
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - SUPABASE_URL=${SUPABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JSON_LOGGING=${JSON_LOGGING:-true}
      - CONTAINER_ENV=true
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-4}
      - GUNICORN_TIMEOUT=${GUNICORN_TIMEOUT:-600}
      - APP_VERSION=${APP_VERSION:-1.0.0}
    volumes:
      - ./logs:/app/logs
    networks:
      - flask-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flask-api.rule=Host(`api.yourdomain.com`)"
      - "traefik.http.routers.flask-api.tls=true"
      - "traefik.http.routers.flask-api.tls.certresolver=letsencrypt"

  # Redis for rate limiting (optional)
  redis:
    image: redis:7-alpine
    container_name: flask-book-generator-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - flask-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: flask-book-generator-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - flask-network
    depends_on:
      - flask-api
    profiles:
      - nginx

volumes:
  redis-data:
    driver: local

networks:
  flask-network:
    driver: bridge

# Development override
---
# docker-compose.override.yml (for development)
version: '3.8'

services:
  flask-api:
    build:
      target: development
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - LOG_LEVEL=DEBUG
      - JSON_LOGGING=false
      - CORS_ORIGINS=http://localhost:3000
    volumes:
      - .:/app
      - ./logs:/app/logs
    ports:
      - "5000:5000"
    command: python app.py