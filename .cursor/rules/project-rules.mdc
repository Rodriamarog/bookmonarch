---
alwaysApply: true
---

# --- Project-wide Settings ---
[project]
name = "BookMonarch Frontend"
description = "AI Book Generation SaaS - Frontend application"
purpose = "Enable user authentication, subscription management, and book generation requests."
target_audience = "Aspiring authors, content creators, indie publishers."

# --- Core Tech Stack ---
[tech_stack]
frontend = "Next.js 14+ (App Router)"
react_version = "18+"
typescript_version = "5.x"
styling = "Tailwind CSS (utility-first, responsive)"
backend_as_a_service = "Supabase (Auth, Database, Storage)"
payment_gateway = "Stripe"
ai_model_api = "Google Gemini 2.0 Flash API"

# --- Architecture & Patterns ---
[architecture]
# Prefer Server Components for data fetching and static content where possible.
# Use Client Components for interactive UI elements and client-side state.
component_strategy = "Prefer Server Components for static/data-fetching, Client Components for interactivity. Clearly mark Client Components with 'use client'."
data_fetching = "Leverage Next.js data fetching methods (e.g., async/await in Server Components, SWR/React Query for client-side if needed)."
state_management = "Use React Context API for global authentication state. Local component state for UI logic."
api_interaction = "For Supabase, use @supabase/supabase-js client. For AI/Stripe, interact via Next.js API Routes (server-side) or dedicated backend service."
routing = "Utilize Next.js App Router for file-system based routing."

# --- Coding Standards & Best Practices ---
[coding_standards]
language = "TypeScript"
linting = "Adhere to ESLint best practices. Ensure no linting errors."
formatting = "Use Prettier-compatible formatting. Consistent indentation (2 spaces)."
component_structure = "Functional components with React Hooks. Avoid class components."
naming_conventions = "CamelCase for components, variables. PascalCase for types/interfaces. kebab-case for CSS classes (Tailwind)."
error_handling = "Implement robust error handling with try/catch blocks for API calls. Provide user-friendly feedback."
loading_states = "Show clear loading indicators for asynchronous operations."
accessibility = "Prioritize basic accessibility (semantic HTML, proper form labels)."

# --- Security Considerations ---
[security]
environment_variables = "Strictly use process.env.NEXT_PUBLIC_ for client-side accessible variables. All sensitive keys (e.g., Supabase service_role key, Stripe secret key) MUST only be used on the server-side (Next.js API Routes or dedicated backend)."
supabase_rls = "Assume Supabase RLS is enabled and correctly configured for user-specific data (profiles, books). All database interactions must respect RLS."
api_keys = "Never expose backend API keys (Stripe secret, Gemini API key) directly in client-side code."
input_validation = "Validate all user inputs on both frontend and backend (where applicable)."

# --- Performance Optimizations ---
[performance]
image_optimization = "Use Next.js Image component for optimized image loading."
bundle_size = "Aim for minimal client-side JavaScript bundles."
responsive_design = "Ensure full responsiveness using Tailwind CSS breakpoints (sm:, md:, lg:)."

# --- Supabase Specifics ---
[supabase]
client_initialization = "Initialize Supabase client using NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY."
auth_integration = "Use supabase.auth methods for sign-up, sign-in (email/password, Google OAuth), and sign-out."
profile_management = "Interact with the 'public.profiles' table for user metadata, linked by auth.uid()."
book_management = "Interact with the 'public.books' table for book metadata, linked by user_id."
storage_interaction = "Use Supabase Storage for storing actual book content files (private buckets, signed URLs for access)."

# --- UI/UX Guidelines ---
[ui_ux]
design_system = "Use Tailwind CSS for styling. Apply rounded corners to all interactive elements and containers. Use 'Inter' font."
color_palette = "Focus on purple and indigo gradients for primary branding, with contrasting whites/grays for text and backgrounds."
user_feedback = "Provide clear visual feedback for user actions (e.g., success messages, error alerts, loading states)."